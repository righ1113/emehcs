(=x 1 (x 3 *) +) >3x+1                                                                              |
(2 /) >x/2                                                                                          |

(=x =d =m m (x d mod) ==) >mod_base                                                                 |
(=x 0 2 x mod_base) >even?                                                                          |
(=x 0 3 x mod_base) >0mod3?                                                                         |
(=x 0 5 x mod_base) >0mod5?                                                                         |

(=out =inp ((inp cdr) (out (inp car) cons) reverse0) out ([] inp ==)) >reverse0                     |
(=inp inp [] reverse0) >reverse                                                                     |

(>f =out =inp ((inp car) f) >ret ((inp cdr) (out ret cons) f map0) (out reverse) ([] inp ==)) >map0 |
(>f =inp inp [] f map0) >map                                                                        |

(>f >g (=x x g) f) >>>>                                                                             |

(=x =out =inp ((inp cdr) (out (inp car) cons) (x 1 -) take0)
  (out reverse) ([] inp ==) (out reverse) (x 1 <)) >take0                                           |
(=x =inp inp [] x take0) >take                                                                      |

; (=x (x repeat) x cons) >repeat
